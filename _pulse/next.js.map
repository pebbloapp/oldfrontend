{"version":3,"sources":["webpack://pulse-framework/./lib/next/index.ts"],"names":["isServer","process","release","name","preserveServerState","nextProps","core","collections","extractAll","Collection","state","State","PULSE_DATA","forEach","stateItem","isSet","Computed","_value","collection","collectionData","data","groups","key","push","props","loadServerState","globalThis","__NEXT_DATA__","pageProps","pulseData","item","set"],"mappings":";2QAAA,4BA2CA,SAAgBA,W,MACd,MAA0B,oBAAZC,SAAsD,UAAX,QAAhB,EAAO,OAAPA,cAAO,IAAPA,aAAO,EAAPA,QAASC,eAAO,eAAEC,MA1C7D,+BAAgBC,oBAAoBC,EAAmCC,GACrE,MAAMC,EAAc,EAAAC,WAAW,EAAAC,WAAYH,GACrCI,EAAQ,EAAAF,WAAW,EAAAG,MAAOL,GAE1BM,EAAa,CACjBL,YAAa,GACbG,MAAO,IAkBT,OAfAA,EAAMG,QAAQC,KACRA,EAAUX,OAAQW,EAAUC,OAAWD,aAAqB,EAAAE,WAAWJ,EAAWF,MAAMI,EAAUX,MAAQW,EAAUG,UAG1HV,EAAYM,QAAQK,IAClB,MAAMC,EAAiB,CAAEC,KAAM,GAAIC,OAAQ,IAE3C,IAAK,IAAIC,KAAOJ,EAAWE,KAAUF,EAAWE,KAAKE,GAAKP,QAAOI,EAAeC,KAAKE,GAAOJ,EAAWE,KAAKE,GAAKL,QAEjH,IAAK,IAAIK,KAAOJ,EAAWG,OAAmBH,EAAWG,OAAOC,GAAKP,QAAOI,EAAeE,OAAOC,GAAOJ,EAAWG,OAAOC,GAAKL,QAEhIL,EAAWL,YAAYgB,KAAKJ,KAG9Bd,EAAUmB,MAAMZ,WAAaA,EACtBP,GAGT,2BAAgBoB,gBAAgBnB,G,UAC9B,IAAIN,aAC2C,QAA/C,EAAoC,QAApC,EAA6B,QAA7B,EAAc,OAAV0B,iBAAU,IAAVA,gBAAU,EAAVA,WAAYC,qBAAa,eAAEH,aAAK,eAAEI,iBAAS,eAAEhB,YAAY,CAC3D,MAAMiB,EAAYH,WAAWC,cAAcH,MAAMI,UAAUhB,WAErDF,EAAQ,EAAAF,WAAW,EAAAG,MAAOL,GACZ,EAAAE,WAAW,EAAAC,WAAYH,GAE3CI,EAAMG,QAAQiB,KACRA,EAAK3B,OAAQ0B,EAAUnB,MAAMoB,EAAK3B,OAAW2B,aAAgB,EAAAd,UAAWc,EAAKC,IAAIF,EAAUnB,MAAMoB,EAAK3B,WAKhH,sB","file":"next.js","sourcesContent":["import { Collection, State, Computed, extractAll } from '../index';\r\n\r\nexport function preserveServerState(nextProps: { [key: string]: any }, core: { [key: string]: any }) {\r\n  const collections = extractAll(Collection, core);\r\n  const state = extractAll(State, core);\r\n\r\n  const PULSE_DATA = {\r\n    collections: [],\r\n    state: {}\r\n  };\r\n\r\n  state.forEach(stateItem => {\r\n    if (stateItem.name && stateItem.isSet && !(stateItem instanceof Computed)) PULSE_DATA.state[stateItem.name] = stateItem._value;\r\n  });\r\n\r\n  collections.forEach(collection => {\r\n    const collectionData = { data: {}, groups: {} };\r\n\r\n    for (let key in collection.data) if (collection.data[key].isSet) collectionData.data[key] = collection.data[key]._value;\r\n\r\n    for (let key in collection.groups as any) if (collection.groups[key].isSet) collectionData.groups[key] = collection.groups[key]._value;\r\n\r\n    PULSE_DATA.collections.push(collectionData);\r\n  });\r\n\r\n  nextProps.props.PULSE_DATA = PULSE_DATA;\r\n  return nextProps;\r\n}\r\n\r\nexport function loadServerState(core: { [key: string]: any }) {\r\n  if (isServer()) return;\r\n  if (globalThis?.__NEXT_DATA__?.props?.pageProps?.PULSE_DATA) {\r\n    const pulseData = globalThis.__NEXT_DATA__.props.pageProps.PULSE_DATA;\r\n\r\n    const state = extractAll(State, core);\r\n    const collections = extractAll(Collection, core);\r\n\r\n    state.forEach(item => {\r\n      if (item.name && pulseData.state[item.name] && !(item instanceof Computed)) item.set(pulseData.state[item.name]);\r\n    });\r\n  }\r\n}\r\n\r\nexport function isServer() {\r\n  return typeof process !== 'undefined' && process?.release?.name === 'node';\r\n}\r\n"],"sourceRoot":""}